cluster_manager:
  local_cluster_name: {{ env "ENVOY_SERVICE_NAME" }}

layered_runtime:
  layers:
  - name: static_layer_0
    static_layer:
      envoy.deprecated_features:envoy.config.bootstrap.v3.Bootstrap.tracing: true
      re2.max_program_size.error_level: 1000
      re2.max_program_size.warn_level: 1000
      overload:
        global_downstream_max_connections: 50000
      upstream:
        zone_routing:
          min_cluster_size: 1

dynamic_resources:
  lds_config:
    resource_api_version: V3
    api_config_source:
      api_type: GRPC
      transport_api_version: V3
      grpc_services:
      - envoy_grpc:
          cluster_name: xds_cluster
      #set_node_on_first_message_only: true
  cds_config:
    resource_api_version: V3
    api_config_source:
      api_type: GRPC
      transport_api_version: V3
      grpc_services:
      - envoy_grpc:
          cluster_name: xds_cluster

static_resources:
  clusters:
  - name: {{ env "ENVOY_SERVICE_NAME" }}
    connect_timeout: 0.25s
    lb_policy: ROUND_ROBIN
    type: EDS
    eds_cluster_config:
      eds_config:
        resource_api_version: V3
        api_config_source:
          api_type: GRPC
          transport_api_version: V3
          grpc_services:
          - envoy_grpc:
              cluster_name: xds_cluster
  - name: xds_cluster
    connect_timeout: 1s
    type: STRICT_DNS
    http2_protocol_options: {}
    upstream_connection_options:
      # configure a TCP keep-alive to detect and reconnect to the admin
      # server in the event of a TCP socket half open connection
      tcp_keepalive: {}
    load_assignment:
      cluster_name: xds_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                # add /etc/host for develop
                # <host external ip> envoy-control-plane
                address: envoy-control-plane
                port_value: 18080

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 18000

tracing:
  http:
    name: envoy.tracers.dynamic_ot
    typed_config:
      "@type": type.googleapis.com/envoy.config.trace.v3.DynamicOtConfig
      library: /usr/local/lib/libjaegertracing_plugin.so
      config:
        service_name: {{ env "ENVOY_SERVICE_NAME" }}
        sampler:
          type: const
          param: 1
        reporter:
          localAgentHostPort: {{ env "JAEGER_AGENT_HOST" }}:6831
        headers:
          jaegerDebugHeader: jaeger-debug-id
          jaegerBaggageHeader: jaeger-baggage
          traceBaggageHeaderPrefix: uberctx-
        baggage_restrictions:
          denyBaggageOnInitializationFailure: false
          hostPort: ""