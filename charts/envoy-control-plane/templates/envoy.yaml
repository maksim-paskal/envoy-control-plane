{{ if .Values.withExamples }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy
  labels:
    app: envoy
spec:
  selector:
    matchLabels:
      app: envoy
  replicas: 1
  template:
    metadata:
      labels:
        app: envoy
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - envoy
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - envoy
              topologyKey: topology.kubernetes.io/zone
            weight: 100
      volumes:
      - name: certs
        configMap:
          name: envoy-certs
      containers:
      - name: envoy
        lifecycle:
          preStop:
            exec:
              # gracefully drain all connection
              command: ["/bin/sh", "-c", "cli -drainEnvoy; sleep 5s; pkill -SIGTERM envoy"]
        image: {{ tpl .Values.envoy.registry.image . | quote }}
        imagePullPolicy: {{ .Values.envoy.registry.imagePullPolicy | quote }}
        args:
        - /bin/sh
        - -c
        - |
          zone=$(cli)

          /usr/local/bin/envoy \
          --config-path /etc/envoy/envoy.yaml \
          --log-level warn \
          --service-cluster test \
          --service-node test1-id \
          --service-zone $zone
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
        env:
        - name: ENVOY_SERVICE_NAME
          value: "test-envoy-service"
        - name: JAEGER_AGENT_HOST
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        readinessProbe:
          httpGet:
            path: /ready
            port: 18000
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /server_info
            port: 18000
          initialDelaySeconds: 60
          periodSeconds: 10
        ports:
        - containerPort: 8000
        - containerPort: 18000
        volumeMounts:
        - name: certs
          mountPath: /certs
---
apiVersion: v1
kind: Service
metadata:
  name: envoy
  labels:
    app: envoy
spec:
  type: ClusterIP
  ports:
  - name: admin
    port: 18000
    protocol: TCP
  - name: http
    port: 8000
    protocol: TCP
  selector:
    app: envoy
{{ end }}